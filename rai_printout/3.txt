import Data.List
 
send1 :: ([Integer], [Integer], [Integer])
send1 = head [([s,e,n,d], [m,o,r,e], [m,o,n,e,y])
             | s <- [1..9], e <- [0..9], n <- [0..9], d <- [0..9]
             , m <- [1..9], o <- [0..9], r <- [0..9], y <- [0..9]
             , length (group $ sort [s,e,n,d,m,o,r,y]) == 8
             , 1000*(s+m) + 100*(e+o) + 10*(n+r) + d+e ==
               10000*m + 1000*o + 100*n + 10*e + y]
 
send2 :: (Integer, Integer, Integer)
send2 = head [ (send, more, money) | (s:e:n:d:m:o:r:y:_) <- permutations [0..9]
             , s /= 0, m /= 0, let fill = foldl ((+) . (* 10)) 0
             , let send = fill [s,e,n,d], let more = fill [m,o,r,e]
             , let money = fill [m,o,n,e,y], send + more == money]

/*****OUTPUT*******/


d1_9(1).
d1_9(2).
d1_9(3).
d1_9(4).
d1_9(5).
d1_9(6).
d1_9(7).
d1_9(8).
d1_9(9).
 
digit(0).
digit(X) :- d1_9(X).
 
distinct([]).
distinct([X|Xs]) :- not(member(X, Xs)), distinct(Xs).
 
sendmoremoney :-
   d1_9(S), digit(E), digit(N), digit(D), d1_9(M), digit(O), digit(R), digit(Y),
   distinct([S, E, N, D, M, O, R, Y]),
   SEND is 1000*S + 100*E + 10*N + D,
   MORE is 1000*M + 100*O + 10*R + E,
   MONEY is 10000*M + 1000*O + 100*N + 10*E + Y,
   MONEY is SEND + MORE,
   print([[S, E, N, D], [M, O, R, E], [M, O, N, E, Y]]).
 
?- sendmoremoney.
[[9,5,6,7],[1,0,8,5],[1,0,6,5,2]]

*/